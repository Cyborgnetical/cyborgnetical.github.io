---


import { ClientRouter } from "astro:transitions";

import markdownIt from 'markdown-it';

// Initialize markdown-it with proper encoding support
const md = new markdownIt({
  html: true,
  breaks: true,
  langPrefix: 'lang-',
});

// Fetch the content
const response = await fetch('https://raw.githubusercontent.com/Cyborgnetical/Cyborgnetical/refs/heads/main/README.md');
const content = await response.text();

// Render the markdown
const html = md.render(content);


// Debug output - verify the rendered HTML
console.log('Rendered HTML length:', html.length);
console.log('First 50 chars of rendered HTML:', JSON.stringify(html.slice(0, 50)));
---


<!doctype html>
<html>
    <head>
        <title>Cyborgnetical | Home</title>
        <meta charset="utf-8">
        <ClientRouter></ClientRouter>
    </head>
    <body>
        <div id="Landing-Page">
            <nav id="Orbital-Objects" style="z-index: 1;">
                <div><img src="https://www.svgrepo.com/show/293823/engineering-wrench.svg"><a href="#about-me-desc">About Me</a> <!-- Make it a planet --></div>
                <div><img src="https://www.svgrepo.com/show/241709/suitcase-portfolio.svg"><a>Work <br> (Coming Soon)</a> <!-- Make it a Space Station or moon --></div>
                <div><img src="https://www.svgrepo.com/show/205852/bookshelf.svg"><a href="/notes">Notes</a><!-- Make it a floating book --></div>
                <div><img src="https://www.svgrepo.com/show/407381/satellite.svg"><a><br> Contact <br> (Coming Soon)</a> <!-- Make it a sattelite --></div>
            </nav>
            <div id="" style="align-self:end;">
                <h1>Cyborgnetical</h1>
                <hr id="Landing-FunnyHR">
                <h2 id="Landing-FunnyH2">High School Hobbyist</h2>
            </div>
            <div id="Stars" style="position: absolute; width:100vw; height:80vh; top:0px; overflow-x:hidden; overflow-y:visible;">

            </div>
        </div>
        <script is:inline data-astro-rerun=true>
            // Add this script to your existing JavaScript code
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                }
            });
            });
            let i = 0;
            setInterval(()=>{
                if(i>=2){
                    i=-1
                }
                i++
                document.getElementById("Landing-FunnyHR").style.transform = `rotate(${i}deg)`
                document.getElementById("Landing-FunnyH2").style.transform = `rotate(${(Math.random()*3)}deg)`
                
            },1000)

            const StarContainer = document.getElementById("Stars")
            let StarArray = []
            for(let j=0;j<35;j++){
                let star = document.createElement("img")
                let base = Math.floor(Math.random()*3)
                let scale = 3
                switch(base){
                    case 0:
                        scale = 3*scale
                    break;
                    case 1:
                        scale = 5*scale
                    break;
                    case 2:
                        scale = 7*scale
                    break;
                }
                
                star.src = `/assets/stars/star${base}.png`
                star.style.width = `${scale}px`
                star.className = "star"

                star.style.left = `${(Math.random()*100)}vw`
                star.style.top = `${Math.random()*75}vh`

                StarArray.push(star)
                StarContainer.appendChild(star)
            }
            let timebefore = 0
            let deltatime = 0


            function render(){
                deltatime = (performance.now() - timebefore)/1000
                timebefore = performance.now()

                let speed = (deltatime*2)
                let measurement = window.innerWidth / 100
                for(let j=0; j<StarArray.length;j++){
                    StarArray[j].style.left = `${parseFloat(StarArray[j].style.left.split('vw')[0])-speed}vw`
                    if(measurement*parseFloat(StarArray[j].style.left.split('vw')[0]) <= -25){
                        StarArray[j].style.left = `${100-parseFloat(StarArray[j].style.left.split('vw')[0])}vw`
                    }
                }
                console.log(measurement*parseFloat(StarArray[5].style.left.split('vw')[0]))
                requestAnimationFrame(render)
            }

            requestAnimationFrame(render)
        </script>
        <style is:inline>
            .star{
                    position: absolute;
                    image-rendering: pixelated;
            }
        </style>
        <style lang="less">
            @font-face {
                font-family:"Tomorrow";
                src: url("/fonts/Tomorrow-Regular.ttf");
            }
            @font-face {
                font-family:"Rubik";
                src: url("/fonts/Rubik-VariableFont_wght.ttf");
            }
            @font-face {
                font-family:"Open Sans";
                src: url("/fonts/Open Sans.ttf");
            }
            body{
                padding:0px;
                margin:0px;

                color:white;

                h1{
                    margin:0;
                    font-family: "Tomorrow";
                    font-weight: 900;

                    font-size: 5em;
                }
                hr{
                    transition: 2000ms;
                }
                h2{
                    font-family: "Tomorrow";
                    font-size: 4em;
                    text-decoration: double;
                    text-decoration-line:underline;

                    margin:0;

                    transition: 2000ms;
                }
            }
            #Landing-Page{
                display:grid;
                grid-template-rows: 20vh 40vh;

                align-items: center;
                justify-items: center;

                text-align: center;
            }
            nav{
                width:50vw;
                display:flex;
                align-items: center;
                justify-content: space-evenly;
                font-family: "Rubik";
                div{
                    position: relative;
                    img{
                        height:25px;
                    }
                    a{
                        display: grid;

                        align-items: center;
                        justify-content: center;

                        text-align: center;
                    }
                }
            }
            #Landing-Page{
                width:100vw;
                height:100vh;

                background: linear-gradient( rgb(25, 1, 35) 75%,rgb(49, 6, 68), rgb(17, 27, 85), rgba(42, 123, 155, 1), rgba(237, 221, 83, 1) );

                display: grid;
            }
        </style>

        <div id="about-me">
            <article id="about-me-desc" style="z-index: 1;">
                <h2>About Me</h2>
                <Fragment set:html={html} />

            </article>
            <div id="about-me-background">
                <img src="https://www.svgrepo.com/show/187784/earth-globe-global.svg">
            </div>
        </div>
        <style lang="less">
            #about-me{
                height: 1000px;
                position: relative;
                background: linear-gradient( rgba(237, 221, 83, 1), rgb(255, 159, 49) );

                display: grid;
                align-items: center;
                justify-content: center;

                overflow-y: hidden;
                
            }
            #about-me-background{
                position: absolute;

                display: grid;
                align-items: center;
                justify-content: center;
                overflow-y: hidden;

                width:100vw;

                img{
                    position: relative;
                    top:45%;
                    width: 110vw;
                }
            }
        </style>
    </body>
</html>