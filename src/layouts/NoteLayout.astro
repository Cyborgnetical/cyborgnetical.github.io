---
    import Layout from "./Layout.astro";
    import mermaid from 'mermaid';
    import { UrltoReadableText, shortenAP } from "../utils/functions";
    //import "./NoteStyles.css"
    interface Props {
        subject:string;
        unit:number;
        name:string;
    }

    const {subject,unit} = Astro.props
    // im going to regret this later
    const title = `${shortenAP(UrltoReadableText(subject.split("/")[0]))} Unit: ${unit}`
---

<Layout name={title} overrideTitle={true}>
  <style>
  </style>
  <script>
      // Source: https://github.com/JuanM04/portfolio/blob/983b0ed0eabdac37bf8b7912d3e8128a443192b9/src/pages/docs/%5B...documentSlug%5D.astro#L74-L103
      // From this comment: https://github.com/withastro/astro/issues/4433#issuecomment-1584019991
      /**
       * @params {HTMLCollectionOf<HTMLElement>} graphs
       */
      //@ts-ignore
      async function renderDiagrams(graphs) {
        const {default: mermaid} = await import("mermaid")
        mermaid.initialize({
          startOnLoad: false,
          fontFamily: "var(--sans-font)",
          // @ts-ignore This works, but TS expects a enum for some reason
          theme: window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "default",
        })
  
        for (const graph of graphs) {
          const content = graph.querySelector(".mermaid-src").innerText
          if (!content) continue
          let svg = document.createElement("svg")
          const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000))
          graph.appendChild(svg)
          mermaid.render(id, content).then(result => {
            graph.innerHTML = result.svg
          })
        }
      }
  
      const graphs = document.getElementsByClassName("mermaid")
      if (document.getElementsByClassName("mermaid").length > 0) {
        renderDiagrams(graphs);
      }
    </script>
  <slot></slot>
</Layout>